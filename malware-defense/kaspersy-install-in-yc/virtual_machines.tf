resource "tls_private_key" "ssh" {
  algorithm = "RSA"
  rsa_bits  = "4096"
}

resource "local_file" "private_key-with-perenos" {
  content         = tls_private_key.ssh.private_key_pem
  filename        = "./private_key1.pem"
  file_permission = "0600"
}

resource "local_file" "private_key-without-perenos" {
  content         = chomp(tls_private_key.ssh.private_key_pem)
  filename        = "./private_key2.pem"
  file_permission = "0600"
}


resource "local_file" "public-with-perenos" {
  content         = tls_private_key.ssh.public_key_openssh
  filename        = "./public_key1.pem"
  file_permission = "0600"
}

resource "local_file" "public-without-perenos" {
  content         = chomp(tls_private_key.ssh.public_key_openssh)
  filename        = "./public_key2.pem"
  file_permission = "0600"
}

data "template_file" "cloud_init_win" {
  template = file("./cloud-init_win.tpl.yaml")
}


data "template_file" "cloud_init_lin" {
  template = file("./cloud-init_lin.tpl.yaml")
   vars =  {
        ssh_key = "${chomp(tls_private_key.ssh.public_key_openssh)}"

    }
}

data "yandex_compute_image" "img_lin" {
  family = "ubuntu-2004-lts"
}

//Создание sa----------------
resource "yandex_iam_service_account" "sa" {
  name        = "ksc-sa"
}


resource "yandex_resourcemanager_folder_iam_binding" "ksc-bind" {
  folder_id = var.folder_id

  role = "marketplace.meteringAgent"

  members = [
    "serviceAccount:${yandex_iam_service_account.sa.id}",
  ]
}

//Развертывание KSC--------------
resource "yandex_compute_instance" "ksc" {

  name        = "ksc"
  hostname    = "ksc"
  platform_id = "standard-v2"
  zone        = "ru-central1-a"
  service_account_id = yandex_iam_service_account.sa.id

  resources {
    cores  = 4
    memory = 8
  }

  boot_disk {
    initialize_params {
      image_id = "fd82o4hrthjatcgr16t8"
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.subnets[0].id
    ip_address = "192.168.10.10"
    nat                = true
    security_group_ids = [yandex_vpc_security_group.sg-vpc-kasper.id]
  }

  metadata = {
    user-data = "${data.template_file.cloud_init_win.rendered}"
  }
}

//Развертывание linux машин

resource "yandex_compute_instance" "lin" {
  count = 3
  zone        = "ru-central1-a"
  name        = "lin-${count.index}"
  hostname    = "lin-${count.index}"
  platform_id = "standard-v2"
  resources {
    cores  = 2
    memory = 4
  }
  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.img_lin.id
      type     = "network-ssd"
      size     = 26
    }
  }

  network_interface {
    subnet_id  = yandex_vpc_subnet.subnets[2].id
    ip_address = "192.168.30.1${count.index}"
    nat = true
    security_group_ids = [yandex_vpc_security_group.sg-vpc-kasper.id]
}

metadata = {
  user-data = "${data.template_file.cloud_init_lin.rendered}"
  serial-port-enable = 1
}
}

//Развертывание Container-optimised image
data "yandex_compute_image" "container-optimized-image" {
  family = "container-optimized-image"
}

resource "yandex_compute_instance" "instance-based-on-coi" {
  name        = "container-lin"
  hostname    = "container-lin"
  zone        = "ru-central1-a"
  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.container-optimized-image.id
    }
  }
  network_interface {
    subnet_id  = yandex_vpc_subnet.subnets[2].id
    ip_address = "192.168.30.50"
    nat = true
    security_group_ids = [yandex_vpc_security_group.sg-vpc-kasper.id]
  }
  resources {
    cores = 2
    memory = 4
  }
  metadata = {
  user-data = "${data.template_file.cloud_init_lin.rendered}"
  docker-container-declaration = file("docker-declaration.yaml")
  serial-port-enable = 1
}
}


//Развертывание windows

resource "yandex_compute_instance" "win" {
  count       = 2
  name        = "win-${count.index}"
  hostname    = "win-${count.index}"
  platform_id = "standard-v2"
  zone        = "ru-central1-a"
  

  resources {
    cores  = 4
    memory = 8
  }

  boot_disk {
    initialize_params {
      image_id = "fd8vbpg8aq7gmf72a7qh"
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.subnets[1].id
    ip_address = "192.168.20.1${count.index}"
    nat                = true
    security_group_ids = [yandex_vpc_security_group.sg-vpc-kasper.id]
  }

  metadata = {
    user-data = "${data.template_file.cloud_init_win.rendered}"
  }
}

output "external_ip_address_ksc" {
  value = yandex_compute_instance.ksc.network_interface.0.nat_ip_address
}